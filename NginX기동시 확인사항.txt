1. Edit ALLOWED_HOSTS in settings.py. Waitress will be running the Django server at http://localhost:8000.
   STATIC_ROOT = os.path.join(BASE_DIR, 'static') 추가
2. Collect static files by running python manage.py collectstatic
3. Edit nginx_waitress/webproeject_nginx.conf
    Edit the server_name (서버 이관시 IP)
    Edit the path to /static (and /media if needed)
    Edit proxy_pass to match the server running from Waitress (i.e. runserver.py). This will usually be localhost or your IP address

4. Create two directories inside of C:/nginx/
   Create sites-enabled and sites-available
5. Copy webproject_nginx.conf to the two directories
6. Edit C:/nginx/conf/nginx.conf
   Add include <path to your sites-enabled/webproject_nginx.conf>;
   Change port 80 to a non-essential port like 10. We will need to utilize 80 for our Django project
7. Open a terminal at C:/nginx/ and run nginx.exe -t to check files, and if everything is successful run nginx.exe to start the server
8. Open a web browser and navigate to http://localhost
9. webapp>config>settings.py
   ALLOWED_HOSTS = ['localhost', '127.0.0.1']
10. python runserver.py

start nginx //시작
nginx -s stop //빠른 종료
nginx -s quit //일반 종료
nginx -s reload //리로드

참고
https://www.youtube.com/watch?v=BBKq6H9Rm5g




Linux Nginx-gunicorn-djang 연동
1. gunicorn 연결
/venv/sMartpaLm/bin# source activate
pip3 install gunicorn
root@ksb:/sMartpaLm/Web/sMartpaLm# nohup /home/ksb/Web/venv/bin/gunicorn --bind 0:8000 config.wsgi:application
--서버재시작시 gunicor 실행을 위해 vi /etc/systemd/system/gunicorn.service 작성
--systemctl daemon-reload : 서비스를 새로등록 하거나 수정한 경우 daemon을 리로드해야 한다.
--systemctl start gunicorn
--systemctl enable gunicorn
nohup nginx
